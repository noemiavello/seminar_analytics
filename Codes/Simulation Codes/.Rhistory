setwd("C:/Users/Noe/Desktop/IBE Master/3rd Semester/Seminar/Seminar Paper (paper + code)/Codigos V2/Seminar Codes/Simulation Codes")
setwd("C:/Users/Noe/Desktop/IBE Master/3rd Semester/Seminar/Seminar Paper (paper + code)/Codigos V2/Seminar Codes/Simulation Codes")
#Install and load packages
library(dplyr)
library(tibble)
library(ggplot2)
n = 10000
set.seed(123)
x = runif(n)
p <- function(X) x^.5
#defining CEP
cep = p(X=x)
y = rbinom(n,1,cep)
#data simulation
sim_data <- tibble(x,y,cep)
sim_data
saveRDS(sim_data, "sim_data.rds")
#CEP against forecast probabilities
pl <-
ggplot()+
geom_line(aes(x=sim_data$x,y=sim_data$cep), color="blue")+
geom_abline(intercept = 0,slope = 1) +
xlab("Forecast probability") +
ylab("CEP")
#configuration
pl <- pl + theme_classic()
pl
#calibration curve
pl+
geom_line(
mapping = aes(
y= isoreg(x=sim_data$x,y=sim_data$y)$yf,
x =sort(sim_data$x)
),
color="red"
)
View(sim_data)
ROC_raw <- triptych::roc(y = sim_data$y, x=sim_data$x, concave = FALSE)
AUC_raw <- purrr::map(ROC_raw, \(o) o$estimate$auc) |> unlist()
p_ROC_a <- ROC_raw |> autoplot() &
scale_colour_manual(
values = colour_values,
guide = guide_legend(title = "Forecast"))
colour_values <- c("#E69F00")
# Figure 4 (a)
ROC_raw <- triptych::roc(y = sim_data$y, x=sim_data$x, concave = FALSE)
AUC_raw <- purrr::map(ROC_raw, \(o) o$estimate$auc) |> unlist()
p_ROC_a <- ROC_raw |> autoplot() &
scale_colour_manual(
values = colour_values,
guide = guide_legend(title = "Forecast"))
ROC_PAV <- triptych::roc(y = sim_data$y, x=sim_data$x, concave = TRUE)
AUC_PAV <- purrr::map(ROC_PAV, \(o) o$estimate$auc) |> unlist()
p_ROC_c <- ROC_PAV |> autoplot() &
scale_colour_manual(
values = colour_values,
guide = guide_legend(title = "Forecast"))
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
# Annotate the ROC curve diagrams with AUC values
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:3) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", colour_values),
size = annot_size,
fontface = c(1, 1, 1, 1),
hjust = 0
)
}
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
p_ROC_a_annot + ggtitle("(a) Original ROC Curve")
# Annotate the ROC curve diagrams with AUC values
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:3) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", colour_values),
size = annot_size,
fontface = c(1, 1, 1, 1),
hjust = 0
)
}
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
p_ROC_a_annot + ggtitle("(a) Original ROC Curve")
p_ROC_a
annotate_auc(AUC_raw)
library(triptych)
library(ggplot2)
library(dplyr)
library(tidyr)
library(triptych)
library(ggplot2)
library(dplyr)
library(tidyr)
sim_data <- readRDS("sim_data.rds")
library(triptych)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("C:/Users/Noe/Desktop/IBE Master/3rd Semester/Seminar/Seminar Paper (paper + code)/Codigos V2/Seminar Codes/Simulation Codes")
sim_data <- readRDS("sim_data.rds")
ROC_raw <- triptych::roc(y = sim_data$y, x=sim_data$x, concave = FALSE)
AUC_raw <- purrr::map(ROC_raw, \(o) o$estimate$auc) |> unlist()
p_ROC_a <- ROC_raw |> autoplot() &
scale_colour_manual(
values = "#E69F00",
guide = guide_legend(title = "Forecast"))
ROC_PAV <- triptych::roc(y = sim_data$y, x=sim_data$x, concave = TRUE)
AUC_PAV <- purrr::map(ROC_PAV, \(o) o$estimate$auc) |> unlist()
p_ROC_c <- ROC_PAV |> autoplot() &
scale_colour_manual(
values = "#E69F00",
guide = guide_legend(title = "Forecast"))
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:3) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", colour_values),
size = annot_size,
fontface = c(1, 1, 1, 1),
hjust = 0
)
}
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
p_ROC_a
p_ROC_c
annotate_auc(AUC_raw)
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:3) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", colour_values),
size = annot_size,
fontface = c(1, 1, 1, 1),
hjust = 0
)
}
View(annotate_auc)
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:3) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", "#E69F00"),
size = annot_size,
fontface = c(1, 1, 1, 1),
hjust = 0
)
}
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:3) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", "#E69F00"),
size = annot_size,
fontface = c(1),
hjust = 0
)
}
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
annotate_auc <- function(auc_values) {
x_annot <- 0.625
y_annot <- 0.45
dodge <- y_annot / 5
annot_size <- 10 / .pt
annotate(
geom = "text",
x = x_annot,
y = y_annot - (0:1) * dodge,
label = c("AUC:", sprintf("%0.3f", auc_values)),
color = c("black", "#E69F00"),
size = annot_size,
fontface = c(1),
hjust = 0
)
}
p_ROC_a_annot <- p_ROC_a + annotate_auc(AUC_raw)
p_ROC_a_annot + ggtitle("(a) Original ROC Curve")
p_ROC_c_annot <- p_ROC_c + annotate_auc(AUC_PAV)
p_ROC_c_annot + ggtitle("(b) Concave ROC Curve")
grid.arrange(p_ROC_a_annot + ggtitle("(a) Original ROC Curve"), p_ROC_c_annot + ggtitle("(b) Concave ROC Curve"), ncol=2)
library(grid)
grid.arrange(p_ROC_a_annot + ggtitle("(a) Original ROC Curve"), p_ROC_c_annot + ggtitle("(b) Concave ROC Curve"), ncol=2)
library(grid)
library(gridExtra)
grid.arrange(p_ROC_a_annot + ggtitle("(a) Original ROC Curve"), p_ROC_c_annot + ggtitle("(b) Concave ROC Curve"), ncol=2)
p_ROC_combined <- grid.arrange(p_ROC_a_annot + ggtitle("(a) Original ROC Curve"), p_ROC_c_annot + ggtitle("(b) Concave ROC Curve"), ncol=2)
#load packages
library(dplyr)
library(tibble)
library(ggplot2)
#1- runiform(n, 0, 1) -> n observations between 0 and 1
#2- generate the function of p(x) using 0.5 or maybe 0.7 -> plot with the diagonal line and calibration curve
#3- then you can obtain the y
#Set up
n = 10000
set.seed(123)
x = runif(n)
p <- function(X) x^.5
#defining CEP
cep = p(X=x)
y = rbinom(n,1,cep)  #y using binomial distribution
#data simulation
sim_data <- tibble(x,y,cep)     #y:observations, x:forecast values
sim_data
saveRDS(sim_data, "sim_data.rds")
# n = 100000
set.seed(123)
rand_unif <- runif(10000, min = 0, max = 1)
hist(rand_unif, freq = FALSE, xlab = "x", density = 20, col = "darkgray",
main = "Uniform distribution for the interval [0,1]")
#CEP against forecast probabilities
pl <-
ggplot()+
geom_line(aes(x=sim_data$x,y=sim_data$cep), color="blue")+
geom_abline(intercept = 0,slope = 1) +
xlab("Forecast probability") +
ylab("CEP")
#configuration
pl <- pl + theme_classic()
pl
#calibration curve
pl+
geom_line(
mapping = aes(
y= isoreg(x=sim_data$x,y=sim_data$y)$yf, #isotonic regression
x =sort(sim_data$x)
),
color="red"
)
library(yardstick)
library(ggplot2)
library(ggfortify)
library(triptych)
library(dplyr)
library(grid)
library(gridExtra)
library(patchwork)
pre_data <- data.frame(truth = as.factor(y), pred = as.numeric(x))
#isotonic regression
autoplot(pr_curve(pre_data, truth, pred), ts.linetype = 'dashed') +
ggtitle("Precision-recall curve")
options(repr.plot.width =9, repr.plot.height =9)
pre_plt <- pr_curve(pre_data, truth, pred) %>%
ggplot(aes(x = recall, y = precision)) +
geom_path(linetype = 'solid', color ="#0072B2", linewidth = 0.8) +
coord_equal() +
ggtitle("(a) Precision-recall curve")  +
theme_bw() +
theme(axis.text=element_text(size=13),axis.title=element_text(size=12))
pre_plt
colnames(sim_data)[colnames(sim_data) == 'y'] <- 'y'
trpt_sim <- triptych(y = sim_data$y, x=sim_data$x )
# Assign plot colors
plot_cols <- c(
"Isotonic regression" = "#D55E00"
)
MCBDSC_point_cols_M1 <- c(
"AMOS" = "black",
"ASAP" = "black",
plot_cols, # ASSA
"BOM" = "black",
"CLIM120" = "black",
"DAFFS" = "black",
"DAFFS-G" = "black",
"MAG4VW" = "black",
"MAG4VWF" = "black",
"MAG4W" = "black",
"MAG4WF" = "black",
"MCEVOL" = "black",
# plot_cols_M1[4], # MCSTAT
"MOSWOC" = "black",
#plot_cols_M1[1], # NICT
#plot_cols_M1[2], # NOAA
"SIDC" = "black"
)
# Figure 7: Brier and Log Score MCB-DSC Plots.
MCBDSC_M1_BrierScore2 <- mcbdsc(sim_data) |>
autoplot(
MCBDSC_repel = TRUE,
colour_values = MCBDSC_point_cols_M1,
colour_unc = "#009E73",
MCB_lim = c(0, 0.0785),
size_axislabels = 12) +
ggtitle("(b) Brier Score") +
theme(plot.title = element_text(size = 10, hjust = 0))
MCBDSC_M1_LogScore <- mcbdsc(sim_data, score = "log_score") |>
autoplot(
MCBDSC_repel = TRUE,
colour_values = MCBDSC_point_cols_M1,
colour_unc = "#009E73",
MCB_lim = c(0, 0.2),
size_axislabels = 12
) +
annotate("text", x = 0.2, y = 0.0405, label = "MAG4VWF", size = 3, hjust = 1) +
ggtitle("(c) Logarithmic Score") +
theme(plot.title = element_text(size = 10, hjust = 0))
adsd <- arrangeGrob(arrangeGrob(pre_plt), arrangeGrob(MCBDSC_M1_BrierScore2,MCBDSC_M1_LogScore, ncol=1), ncol=2, widths=c(2,1))
layout2 <- arrangeGrob(arrangeGrob(pre_plt), arrangeGrob(MCBDSC_M1_BrierScore2,MCBDSC_M1_LogScore, ncol=1), ncol=2, widths=c(2,1))
ggsave("C:/Users/Noe/Desktop/IBE Master/3rd Semester/Seminar_gh/Paper/Plots_sim/layout2.pdf",layout1)
layout2 <- arrangeGrob(arrangeGrob(pre_plt), arrangeGrob(MCBDSC_M1_BrierScore2,MCBDSC_M1_LogScore, ncol=1), ncol=2, widths=c(2,1))
ggsave("C:/Users/Noe/Desktop/IBE Master/3rd Semester/Seminar_gh/Paper/Plots_sim/layout2.pdf",layout2)
ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2, labels = c("B", "C")),
nrow = 2,
labels = "A"
)
library(yardstick)
library(ggplot2)
library(ggfortify)
library(triptych)
library(dplyr)
library(grid)
library(gridExtra)
library(patchwork)
ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2, labels = c("B", "C")),
nrow = 2,
labels = "A"
)
install.packages("ggpubr")
library(ggpubr)
ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2, labels = c("B", "C")),
nrow = 2,
labels = "A"
)
ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2),
nrow = 2
)
layout2 <- ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2),
nrow = 2
)
layout2 <- ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2),
nrow = 2
)
ggsave("C:/Users/Noe/Desktop/IBE Master/3rd Semester/Seminar_gh/Paper/Plots_sim/layout2.pdf",layout2)
layout2 <- ggarrange(pre_plt,
ggarrange(MCBDSC_M1_BrierScore2, MCBDSC_M1_LogScore, ncol = 2),
nrow = 2
)
